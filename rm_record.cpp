#include "rm.h"
using namespace std;
// -------------------------------------------------------------
// 构造函数
// -------------------------------------------------------------
RM_Record::RM_Record()
    : pData(nullptr), size(0), isValid(false) {
}

// -------------------------------------------------------------
// 析构函数
// -------------------------------------------------------------
RM_Record::~RM_Record() {
    if (pData) {
        delete[] pData;
        pData = nullptr;
    }
    size = 0;
    isValid = false;
}

// -------------------------------------------------------------
// Set()
// -------------------------------------------------------------
// 功能：将外部传入的数据复制到 RM_Record 对象中
// 参数：
//   pSrcData - 记录数据缓冲区指针
//   size     - 数据字节数
//   rid      - 记录的 RID（页号 + 槽号）
// -------------------------------------------------------------
RC RM_Record::Set(const char* pSrcData, int s, RID rid_) {
    if (!pSrcData || s <= 0)
        return -1;

    // 如果已有旧数据，释放
    if (pData)
        delete[] pData;

    size = s;
    pData = new char[s];
    memcpy(pData, pSrcData, s);

    rid = rid_;
    isValid = true;

    return 0;
}

// -------------------------------------------------------------
// GetData()
// -------------------------------------------------------------
// 功能：返回记录数据缓冲区的指针
// 注意：该数据为内部副本指针，不应修改
// -------------------------------------------------------------
RC RM_Record::GetData(char*& pOutData) const {
    if (!isValid || !pData)
        return -1;
    pOutData = pData;
    return 0;
}

// -------------------------------------------------------------
// GetRid()
// -------------------------------------------------------------
// 功能：返回该记录的 RID
// -------------------------------------------------------------
RC RM_Record::GetRid(RID& outRid) const {
    if (!isValid)
        return -1;
    outRid = rid;
    return 0;
}